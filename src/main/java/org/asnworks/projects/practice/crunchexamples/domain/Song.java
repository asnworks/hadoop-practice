/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.asnworks.projects.practice.crunchexamples.domain;  
@SuppressWarnings("all")
/** * Record corresponds to a class name in Java. */
@org.apache.avro.specific.AvroGenerated
public class Song extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Song\",\"namespace\":\"org.asnworks.projects.practice.crunchexamples.domain\",\"doc\":\"* Record corresponds to a class name in Java.\",\"fields\":[{\"name\":\"songId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* An id given to the song\"},{\"name\":\"songTitle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* The name of the song\"},{\"name\":\"artistName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* The name of the artist the song belongs to\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** * An id given to the song */
  @Deprecated public java.lang.String songId;
  /** * The name of the song */
  @Deprecated public java.lang.String songTitle;
  /** * The name of the artist the song belongs to */
  @Deprecated public java.lang.String artistName;

  /**
   * Default constructor.
   */
  public Song() {}

  /**
   * All-args constructor.
   */
  public Song(java.lang.String songId, java.lang.String songTitle, java.lang.String artistName) {
    this.songId = songId;
    this.songTitle = songTitle;
    this.artistName = artistName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return songId;
    case 1: return songTitle;
    case 2: return artistName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: songId = (java.lang.String)value$; break;
    case 1: songTitle = (java.lang.String)value$; break;
    case 2: artistName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'songId' field.
   * * An id given to the song   */
  public java.lang.String getSongId() {
    return songId;
  }

  /**
   * Sets the value of the 'songId' field.
   * * An id given to the song   * @param value the value to set.
   */
  public void setSongId(java.lang.String value) {
    this.songId = value;
  }

  /**
   * Gets the value of the 'songTitle' field.
   * * The name of the song   */
  public java.lang.String getSongTitle() {
    return songTitle;
  }

  /**
   * Sets the value of the 'songTitle' field.
   * * The name of the song   * @param value the value to set.
   */
  public void setSongTitle(java.lang.String value) {
    this.songTitle = value;
  }

  /**
   * Gets the value of the 'artistName' field.
   * * The name of the artist the song belongs to   */
  public java.lang.String getArtistName() {
    return artistName;
  }

  /**
   * Sets the value of the 'artistName' field.
   * * The name of the artist the song belongs to   * @param value the value to set.
   */
  public void setArtistName(java.lang.String value) {
    this.artistName = value;
  }

  /** Creates a new Song RecordBuilder */
  public static org.asnworks.projects.practice.crunchexamples.domain.Song.Builder newBuilder() {
    return new org.asnworks.projects.practice.crunchexamples.domain.Song.Builder();
  }
  
  /** Creates a new Song RecordBuilder by copying an existing Builder */
  public static org.asnworks.projects.practice.crunchexamples.domain.Song.Builder newBuilder(org.asnworks.projects.practice.crunchexamples.domain.Song.Builder other) {
    return new org.asnworks.projects.practice.crunchexamples.domain.Song.Builder(other);
  }
  
  /** Creates a new Song RecordBuilder by copying an existing Song instance */
  public static org.asnworks.projects.practice.crunchexamples.domain.Song.Builder newBuilder(org.asnworks.projects.practice.crunchexamples.domain.Song other) {
    return new org.asnworks.projects.practice.crunchexamples.domain.Song.Builder(other);
  }
  
  /**
   * RecordBuilder for Song instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Song>
    implements org.apache.avro.data.RecordBuilder<Song> {

    private java.lang.String songId;
    private java.lang.String songTitle;
    private java.lang.String artistName;

    /** Creates a new Builder */
    private Builder() {
      super(org.asnworks.projects.practice.crunchexamples.domain.Song.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.asnworks.projects.practice.crunchexamples.domain.Song.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Song instance */
    private Builder(org.asnworks.projects.practice.crunchexamples.domain.Song other) {
            super(org.asnworks.projects.practice.crunchexamples.domain.Song.SCHEMA$);
      if (isValidValue(fields()[0], other.songId)) {
        this.songId = data().deepCopy(fields()[0].schema(), other.songId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.songTitle)) {
        this.songTitle = data().deepCopy(fields()[1].schema(), other.songTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.artistName)) {
        this.artistName = data().deepCopy(fields()[2].schema(), other.artistName);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'songId' field */
    public java.lang.String getSongId() {
      return songId;
    }
    
    /** Sets the value of the 'songId' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder setSongId(java.lang.String value) {
      validate(fields()[0], value);
      this.songId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'songId' field has been set */
    public boolean hasSongId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'songId' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder clearSongId() {
      songId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'songTitle' field */
    public java.lang.String getSongTitle() {
      return songTitle;
    }
    
    /** Sets the value of the 'songTitle' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder setSongTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.songTitle = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'songTitle' field has been set */
    public boolean hasSongTitle() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'songTitle' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder clearSongTitle() {
      songTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'artistName' field */
    public java.lang.String getArtistName() {
      return artistName;
    }
    
    /** Sets the value of the 'artistName' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder setArtistName(java.lang.String value) {
      validate(fields()[2], value);
      this.artistName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'artistName' field has been set */
    public boolean hasArtistName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'artistName' field */
    public org.asnworks.projects.practice.crunchexamples.domain.Song.Builder clearArtistName() {
      artistName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Song build() {
      try {
        Song record = new Song();
        record.songId = fieldSetFlags()[0] ? this.songId : (java.lang.String) defaultValue(fields()[0]);
        record.songTitle = fieldSetFlags()[1] ? this.songTitle : (java.lang.String) defaultValue(fields()[1]);
        record.artistName = fieldSetFlags()[2] ? this.artistName : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
